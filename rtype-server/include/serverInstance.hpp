#include <asio/ip/udp.hpp>
#include <asio/io_service.hpp>
#include <iostream>
#include "ServerGame.hpp"

#pragma once

namespace server {
    /**
     * @brief Return the package contained in a buffer (doesn't handle error)
     * @param buffer Buffer containing the package
     * @return Event (NetworkEvent) contained in the buffer
     */
    rtype::NetworkEvent getPackage(std::array<char, 1024> &buffer);

    /**
     * @brief Instance of server handling a game
     */
    class serverInstance {
        public:
            /**
             * @brief Create a server on port 2001
             */
            serverInstance();

            /**
             * @brief Handle the life cycle of the server
             */
            void lifeCycle();

        private:
            /**
             * @brief Run asynchronous action for some microsecond
             * @param microsecond Number of microsecond to run for
             */
            void runFor(std::size_t microsecond);

            /**
             * @brief Send information via a socket
             * @param event package to send
             * @param target target to send to
             */
            void send(rtype::NetworkEvent event, const asio::ip::udp::endpoint &target);

            /**
             * @brief Send a package to all clients of the server
             * @param event package to send
             */
            void sendAll(rtype::NetworkEvent event);

            /**
             * @brief Start listening to all package sent to the server
             */
            void listen();

            /**
             * @brief Choose what to do according to what is stocked in the package
             * @param package Package to handle
             */
            void handlePackage(rtype::NetworkEvent package);

            /**
             * @brief Launch by the package handler when this last is about a new connection
             * @param package Package to handle
             */
            void connect(rtype::NetworkEvent &package);

            /**
             * @brief Launch by the package handler when this last is about a movement
             * @param package Package to handle
             */
            void move(rtype::NetworkEvent package);

            /**
             * @brief Send all game objects having a position to the client
             */
            void sendGameObjects();

            /**
             * @brief Check if the client are still there
             */
            void checkClientPresence();

            /**
             * @brief Used when a player is dead
             * @param id ID of the dead player
             */
            void die(int id);

            /**
             * @brief Clear the queue of event generated by the game
             */
            void clearGameQueue();

            int _nextPlayerId;
            std::chrono::time_point<std::chrono::steady_clock> _refreshTimer;
            std::array<char, 1024> _buffer;
            asio::io_service _service;
            asio::ip::udp::resolver _resolver;
            asio::ip::udp::socket _socket;
            rtype::ServerGame _game;
            asio::ip::udp::endpoint _endpoint;
            asio::ip::udp::endpoint _sender;
            asio::ip::address _addr;
            std::unordered_map<int, asio::ip::udp::endpoint> _players;
            std::unordered_map<int, std::chrono::time_point<std::chrono::steady_clock>> _playersTimer;
    };
}